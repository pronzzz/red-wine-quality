# -*- coding: utf-8 -*-
"""Wine-quality Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mu6gZhhvWDWzKBng1lfEYJISAWYysxbf

Importing the required libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""Reading the file of the given dataset"""

data = pd.read_csv('/content/winequality-red.csv')

"""Visualisation of top 10 reports"""

data.head(10)

"""CLasses of Target Value - **Quality**"""

set(data.quality)

"""Description of the given dataset"""

data.describe()

"""To check the missing values"""

data.isna().sum()

"""Correlation Matrix among all features inside the dataset"""

plt.figure(figsize=(30,20))
corr = data.corr()
sns.heatmap(corr, annot=True)
plt.savefig("Correlation Matrix.png")
plt.show()

"""Detecting Outliers using z-score"""

from scipy import stats
z = np.abs(stats.zscore(data))
print(z)

"""z > 3(Threshold) -> This is an Outlier"""

print(np.where(z>3))

"""Remove those reports whose z>3(outlier)"""

new_data = data[(z<3).all(axis=1)]

"""Comparing new_data with data"""

new_data.shape

data.shape

"""Data splitting into features(x) and target column(y)"""

from sklearn.model_selection import train_test_split
## x - input feature
## y - outcome
x = new_data.drop(columns = 'quality')
y = new_data['quality']

x.head()

y

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2)

"""Data Modelling using Random Forest Classifier"""

from sklearn.ensemble import RandomForestClassifier
rf_classificationModel = RandomForestClassifier(n_estimators=100)

rf_classificationModel.fit(x_train, y_train)

"""Prediction of data using Random Forest Model"""

y_pred = rf_classificationModel.predict(x_test)

y_pred

"""Data Evaluation on metrics"""

from sklearn import metrics
print('Accuracy Score:', metrics.accuracy_score(y_test, y_pred))

"""Accuracy Score: 72.5%

1.   Hyperparameter Tuning -> GridSearchCV
"""

plt.figure(figsize=(30,30))
from sklearn import tree
tree.plot_tree(rf_classificationModel.estimators_[0],filled=True)

plt.figure(figsize=(30,30))
for i in range(len(rf_classificationModel.estimators_)):
  tree.plot_tree(rf_classificationModel.estimators_[i],filled=True)